#!/usr/bin/env python3
"""
analyse_malware_cfg.py – Reverse & dump config + flag
"""

import argparse
import hashlib
import json
import re
import subprocess
from pathlib import Path
from Crypto.Cipher import AES          # PyCryptodome

EMAIL_REGEX = re.compile(rb'[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+')

def extract_email(binary_path: Path) -> bytes:
    """Retourne la première adresse mail trouvée dans les chaînes du binaire."""
    # Utilise 'strings' comme le ferait un analyste humain :contentReference[oaicite:3]{index=3}
    out = subprocess.check_output(['strings', '-n', '5', str(binary_path)], text=False)
    match = EMAIL_REGEX.search(out)
    if not match:
        raise RuntimeError("Aucune adresse e-mail trouvée dans le binaire.")
    return match.group(0)

def derive_key_iv(email: bytes):
    """Dérive clé et IV AES-128 à partir de l'adresse mail (et sa version inversée)."""
    key = hashlib.sha256(email).digest()[:16]               # SHA-256 → 16 octets  :contentReference[oaicite:4]{index=4}
    iv  = hashlib.sha256(email[::-1]).digest()[:16]         # version inversée
    return key, iv

def decrypt_config(cfg_path: Path, key: bytes, iv: bytes) -> bytes:
    """Déchiffre un blob AES-128-CBC sans padding (null-padded)."""
    blob = cfg_path.read_bytes()
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plain = cipher.decrypt(blob)                           # CBC decrypt :contentReference[oaicite:5]{index=5}
    return plain.rstrip(b"\x00")                           # supprime padding nulls

def main():
    parser = argparse.ArgumentParser(
        description="Analyse le malware et déchiffre son fichier de configuration")  # :contentReference[oaicite:6]{index=6}
    parser.add_argument("malware", type=Path, help="Chemin du binaire ELF malveillant")
    parser.add_argument("config",  type=Path, help="Chemin de config.bin")
    args = parser.parse_args()

    # Sécurité : vérifie l’existence des fichiers :contentReference[oaicite:7]{index=7}
    for p in (args.malware, args.config):
        if not p.is_file():
            parser.error(f"{p} n’existe pas ou n’est pas un fichier régulier.")

    # 1) Extraction de l’e-mail
    email = extract_email(args.malware)
    print(f"[+] E-mail trouvé : {email.decode()}")

    # 2) Dérivation clé / IV
    key, iv = derive_key_iv(email)

    # 3) Déchiffrement
    plaintext = decrypt_config(args.config, key, iv)
    cfg = json.loads(plaintext)
    print(f"[+] Configuration déchiffrée :\n{json.dumps(cfg, indent=2)}")

    # 4) Construction du flag
    sha256 = hashlib.sha256(args.malware.read_bytes()).hexdigest()
    flag = f"SHLK{{{sha256}:{email.decode()}:{args.config}}}"
    print(f"[+] FLAG : {flag}")

if __name__ == "__main__":
    main()
